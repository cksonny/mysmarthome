substitutions:
  devicename: kettle-kitchen
  upper_devicename: Kettle Kitchen

esphome:
  name: $devicename
  platform: ESP8266
  board: esp01_1m
wifi:
  ssid: !secret wifi_name
  password: !secret wifi_pass
  fast_connect: true
  ap:
    ssid: $devicename
    password: !secret fallback

captive_portal:

logger:
  baud_rate: 0

api:
  password: !secret api_kettle_kitchen

ota:
  password: !secret api_kettle_kitchen

uart:
  rx_pin: GPIO3
  tx_pin: GPIO1
  baud_rate: 9600

tuya:

button:
  - platform: template
    name: "${upper_devicename} Standby"
    icon: "mdi:power-standby"
    on_press:
      - number.set:
          id: number_mode
          value: 6

number:
  - platform: "tuya"
    id: number_mode
    number_datapoint: 101
    min_value: 0
    max_value: 6
    step: 1

  - platform: "tuya"
    name: "${upper_devicename} Custom Temperature"
    number_datapoint: 102
    min_value: 35
    max_value: 100
    step: 5
    unit_of_measurement: "°C"
    icon: "mdi:thermometer"

select:
  - platform: template
    name: "${upper_devicename} Mode"
    icon: "mdi:kettle"
    id: select_mode
    optimistic: true
    options:
      - "Standby"
      - "Maintain 45°C"
      - "Maintain 60°C"
      - "Maintain 85°C"
      - "Maintain 100°C"
      - "Maintain custom"
      - "Boil water"
    initial_option: "Standby"
    on_value:
      then:
      - lambda: |-
          auto call = id(number_mode).make_call();
          int mode = 6;
          if(x == "Maintain 45°C"){
              mode = 0;
          } else if(x == "Maintain 60°C"){
              mode = 1;
          } else if(x == "Maintain 85°C"){
              mode = 2;
          } else if(x == "Maintain 100°C"){
              mode = 3;
          } else if(x == "Boil water"){
              mode = 4;
          } else if(x == "Maintain custom"){
              mode = 5;
          } else {
            mode = 6;
          }
          call.set_value(mode);
          call.perform();

switch:
  - platform: template
    name: "${upper_devicename}"
    icon: mdi:kettle
    lambda: |-
      if (id(state).state <=2 ) {
        return false;
      } else {
        return true;
      }
    turn_on_action:
      - number.set:
          id: number_mode
          value: 4
    turn_off_action:
      - number.set:
          id: number_mode
          value: 6
          
sensor:
  - platform: wifi_signal
    name: "${upper_devicename} Signal"
    update_interval: 60s
    id: wifisignal

  - platform: "tuya"
    sensor_datapoint: 101
    id: sensor_mode
    on_value:
      then:
        - lambda: |-
            auto call = id(select_mode).make_call();
            std::string mode;
            switch(int(x)){
              case 6:
                mode = "Standby";
                break;
              case 0:
                mode = "Maintain 45°C";
                break;
              case 1:
                mode = "Maintain 60°C";
                break;
              case 2:
                mode = "Maintain 85°C";
                break;
              case 3:
                mode = "Maintain 100°C";
                break;
              case 4:
                mode = "Boil water";
                break;
              case 5:
                mode = "Maintain custom";
                break;
            }
            call.set_option(mode);
            call.perform();

  - platform: "tuya"
    sensor_datapoint: 104
    id: sensor_error
    on_value:
      then:
      - lambda: |-
          switch(int(x)){
            case 0:
              id(text_error).publish_state("");
              break;
            case 1:
              id(text_error).publish_state("Kettle empty!");
            case 4:
              id(text_error).publish_state("Kettle overheated!");
              break;
          }

  - platform: "tuya"
    name: "${upper_devicename} Current Temperature"
    sensor_datapoint: 105
    unit_of_measurement: "°C"
    device_class: "temperature"
    state_class: "measurement"

  - platform: "tuya"
    sensor_datapoint: 106
    id: state
    on_value:
      then:
      - lambda: |-
          switch(int(x)){
            case 1:
              id(text_status).publish_state("Kettle not on base");
              break;
            case 2:
              id(text_status).publish_state("Standby");
              break;
            case 3:
              id(text_status).publish_state("Heating");
              break;
            case 4:
              id(text_status).publish_state("Cooling");
              break;
            case 5:
              id(text_status).publish_state("Maintaining temperature");
              break;
          }

  - platform: "tuya"
    name: "${upper_devicename} Time remaining"
    icon: "mdi:timer"
    sensor_datapoint: 107
    unit_of_measurement: "min"

text_sensor:
  - platform: template
    id: text_error
    name: "${upper_devicename} Error"
    icon: "mdi:kettle-alert"

  - platform: template
    id: text_status
    name: "${upper_devicename} Status"
    icon: "mdi:information-outline"